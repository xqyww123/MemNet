!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Dic	dic.h	/^		class Dic<T>$/;"	class	namespace:Xero::MemNet
Engine	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	struct	namespace:Xero::MemNet	file:
Frates	vec.h	/^		typedef unordered_map<string, float> Frates;$/;"	typedef	namespace:Xero::MemNet
FreqVec	vec.h	/^		typedef vector<float> FreqVec; \/\/ Frequence Vector$/;"	typedef	namespace:Xero::MemNet
Freqs	vec.h	/^		typedef unordered_map<string, int> Freqs;$/;"	typedef	namespace:Xero::MemNet
Key	dic.h	/^		typedef Vec Key;$/;"	typedef	namespace:Xero::MemNet
MemNet	dic.h	/^	namespace MemNet$/;"	namespace	namespace:Xero
MemNet	vec.cpp	/^	namespace MemNet$/;"	namespace	namespace:Xero	file:
MemNet	vec.h	/^	namespace MemNet$/;"	namespace	namespace:Xero
Pair	dic.h	/^		class Pair<T>$/;"	class	namespace:Xero::MemNet
Query	dic.h	/^		typedef Vec Query;$/;"	typedef	namespace:Xero::MemNet
Vec	vec.h	/^		class Vec $/;"	class	namespace:Xero::MemNet
WVec	vec.h	/^		typedef vector<string> WVec; \/\/ Words Vector$/;"	typedef	namespace:Xero::MemNet
Xero	dic.h	/^namespace Xero$/;"	namespace
Xero	vec.cpp	/^namespace Xero$/;"	namespace	file:
Xero	vec.h	/^namespace Xero$/;"	namespace
Xero::MemNet	dic.h	/^	namespace MemNet$/;"	namespace	namespace:Xero
Xero::MemNet	vec.cpp	/^	namespace MemNet$/;"	namespace	namespace:Xero	file:
Xero::MemNet	vec.h	/^	namespace MemNet$/;"	namespace	namespace:Xero
Xero::MemNet::Dic	dic.h	/^		class Dic<T>$/;"	class	namespace:Xero::MemNet
Xero::MemNet::Dic::query	dic.h	/^				Pair<T> query(Key key);$/;"	prototype	class:Xero::MemNet::Dic	access:public	signature:(Key key)
Xero::MemNet::Engine	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	struct	namespace:Xero::MemNet	file:
Xero::MemNet::Engine::brc	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	member	struct:Xero::MemNet::Engine	file:	access:public
Xero::MemNet::Engine::re	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	member	struct:Xero::MemNet::Engine	file:	access:public
Xero::MemNet::Engine::utf	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	member	struct:Xero::MemNet::Engine	file:	access:public
Xero::MemNet::Engine::wi	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	member	struct:Xero::MemNet::Engine	file:	access:public
Xero::MemNet::Engine::word	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	member	struct:Xero::MemNet::Engine	file:	access:public
Xero::MemNet::Frates	vec.h	/^		typedef unordered_map<string, float> Frates;$/;"	typedef	namespace:Xero::MemNet
Xero::MemNet::FreqVec	vec.h	/^		typedef vector<float> FreqVec; \/\/ Frequence Vector$/;"	typedef	namespace:Xero::MemNet
Xero::MemNet::Freqs	vec.h	/^		typedef unordered_map<string, int> Freqs;$/;"	typedef	namespace:Xero::MemNet
Xero::MemNet::Key	dic.h	/^		typedef Vec Key;$/;"	typedef	namespace:Xero::MemNet
Xero::MemNet::Pair	dic.h	/^		class Pair<T>$/;"	class	namespace:Xero::MemNet
Xero::MemNet::Pair::data	dic.h	/^				T data;$/;"	member	class:Xero::MemNet::Pair	access:public
Xero::MemNet::Pair::key	dic.h	/^				Key key;$/;"	member	class:Xero::MemNet::Pair	access:public
Xero::MemNet::Query	dic.h	/^		typedef Vec Query;$/;"	typedef	namespace:Xero::MemNet
Xero::MemNet::Vec	vec.h	/^		class Vec $/;"	class	namespace:Xero::MemNet
Xero::MemNet::Vec::cal_freq	vec.cpp	/^		Freqs* Vec::cal_freq(WVec* wvec)$/;"	function	class:Xero::MemNet::Vec	signature:(WVec* wvec)
Xero::MemNet::Vec::cal_freq	vec.h	/^				static Freqs* cal_freq(WVec* wvec);$/;"	prototype	class:Xero::MemNet::Vec	access:public	signature:(WVec* wvec)
Xero::MemNet::Vec::cal_rate	vec.cpp	/^		Frates* Vec::cal_rate(Freqs* frq)$/;"	function	class:Xero::MemNet::Vec	signature:(Freqs* frq)
Xero::MemNet::Vec::cal_rate	vec.h	/^				static Frates* cal_rate(Freqs*);$/;"	prototype	class:Xero::MemNet::Vec	access:public	signature:(Freqs*)
Xero::MemNet::Vec::cal_spread	vec.cpp	/^		Vec* Vec::cal_spread(Frates* fra, WVec* wvec)$/;"	function	class:Xero::MemNet::Vec	signature:(Frates* fra, WVec* wvec)
Xero::MemNet::Vec::cal_spread	vec.cpp	/^		Vec* Vec::cal_spread(WVec* wvec)$/;"	function	class:Xero::MemNet::Vec	signature:(WVec* wvec)
Xero::MemNet::Vec::cal_spread	vec.h	/^				static Vec* cal_spread(Frates*, WVec*);$/;"	prototype	class:Xero::MemNet::Vec	access:public	signature:(Frates*, WVec*)
Xero::MemNet::Vec::cal_spread	vec.h	/^				static Vec* cal_spread(WVec*);$/;"	prototype	class:Xero::MemNet::Vec	access:public	signature:(WVec*)
Xero::MemNet::Vec::freq	vec.h	/^				FreqVec freq;$/;"	member	class:Xero::MemNet::Vec	access:public
Xero::MemNet::Vec::spread	vec.h	/^				WVec spread;$/;"	member	class:Xero::MemNet::Vec	access:public
Xero::MemNet::Vec::wvec	vec.h	/^				WVec wvec;$/;"	member	class:Xero::MemNet::Vec	access:public
Xero::MemNet::WVec	vec.h	/^		typedef vector<string> WVec; \/\/ Words Vector$/;"	typedef	namespace:Xero::MemNet
Xero::MemNet::andata	vec.cpp	/^		size_t andata(char *ptr, size_t wk_size, size_t nmemb, void *userdata)$/;"	function	namespace:Xero::MemNet	signature:(char *ptr, size_t wk_size, size_t nmemb, void *userdata)
Xero::MemNet::prt_WVec	vec.cpp	/^		char* prt_WVec(WVec* wvec)$/;"	function	namespace:Xero::MemNet	signature:(WVec* wvec)
Xero::MemNet::prt_WVec	vec.h	/^		char* prt_WVec(WVec* wvec);$/;"	prototype	namespace:Xero::MemNet	signature:(WVec* wvec)
Xero::MemNet::pushin	vec.cpp	/^		void pushin(Engine* eng)$/;"	function	namespace:Xero::MemNet	signature:(Engine* eng)
andata	vec.cpp	/^		size_t andata(char *ptr, size_t wk_size, size_t nmemb, void *userdata)$/;"	function	namespace:Xero::MemNet	signature:(char *ptr, size_t wk_size, size_t nmemb, void *userdata)
brc	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	member	struct:Xero::MemNet::Engine	file:	access:public
cal_freq	vec.cpp	/^		Freqs* Vec::cal_freq(WVec* wvec)$/;"	function	class:Xero::MemNet::Vec	signature:(WVec* wvec)
cal_freq	vec.h	/^				static Freqs* cal_freq(WVec* wvec);$/;"	prototype	class:Xero::MemNet::Vec	access:public	signature:(WVec* wvec)
cal_rate	vec.cpp	/^		Frates* Vec::cal_rate(Freqs* frq)$/;"	function	class:Xero::MemNet::Vec	signature:(Freqs* frq)
cal_rate	vec.h	/^				static Frates* cal_rate(Freqs*);$/;"	prototype	class:Xero::MemNet::Vec	access:public	signature:(Freqs*)
cal_spread	vec.cpp	/^		Vec* Vec::cal_spread(Frates* fra, WVec* wvec)$/;"	function	class:Xero::MemNet::Vec	signature:(Frates* fra, WVec* wvec)
cal_spread	vec.cpp	/^		Vec* Vec::cal_spread(WVec* wvec)$/;"	function	class:Xero::MemNet::Vec	signature:(WVec* wvec)
cal_spread	vec.h	/^				static Vec* cal_spread(Frates*, WVec*);$/;"	prototype	class:Xero::MemNet::Vec	access:public	signature:(Frates*, WVec*)
cal_spread	vec.h	/^				static Vec* cal_spread(WVec*);$/;"	prototype	class:Xero::MemNet::Vec	access:public	signature:(WVec*)
data	dic.h	/^				T data;$/;"	member	class:Xero::MemNet::Pair	access:public
freq	vec.h	/^				FreqVec freq;$/;"	member	class:Xero::MemNet::Vec	access:public
key	dic.h	/^				Key key;$/;"	member	class:Xero::MemNet::Pair	access:public
prt_WVec	vec.cpp	/^		char* prt_WVec(WVec* wvec)$/;"	function	namespace:Xero::MemNet	signature:(WVec* wvec)
prt_WVec	vec.h	/^		char* prt_WVec(WVec* wvec);$/;"	prototype	namespace:Xero::MemNet	signature:(WVec* wvec)
pushin	vec.cpp	/^		void pushin(Engine* eng)$/;"	function	namespace:Xero::MemNet	signature:(Engine* eng)
query	dic.h	/^				Pair<T> query(Key key);$/;"	prototype	class:Xero::MemNet::Dic	access:public	signature:(Key key)
re	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	member	struct:Xero::MemNet::Engine	file:	access:public
spread	vec.h	/^				WVec spread;$/;"	member	class:Xero::MemNet::Vec	access:public
utf	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	member	struct:Xero::MemNet::Engine	file:	access:public
wi	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	member	struct:Xero::MemNet::Engine	file:	access:public
word	vec.cpp	/^		struct Engine { bool utf; short brc; char word[128]; int wi; Freqs* re;};$/;"	member	struct:Xero::MemNet::Engine	file:	access:public
wvec	vec.h	/^				WVec wvec;$/;"	member	class:Xero::MemNet::Vec	access:public
